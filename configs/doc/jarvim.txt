*jarvim.txt*                         A sensible IDE-like configuration for Neovim

Author:	    Somraj Saha <somraj.mle@gmail.com>
License:    MIT License
Credits:    Salomon Popp <https://github.com/disrupted> 
            Christian Chiarulli <https://github.com/ChristianChiarullu>

===============================================================================
CONTENTS                                                        *JarvimContents*

Introduction                                        |jarvim-introduction|
Requirements                                        |jarvim-requirements|
Installation                                        |jarvim-installation|
Installed Plugins                                   |jarvim-plugins|
Configuration                                       |jarvim-configurations|
    Key Mappings                                    |jarvim-keymaps|
    Settings                                        |jarvim-settings|
    Auto-Completion                                 |jarvim-autocomplete|
    LSP-Support                                     |jarvim-lsp|
    Snippet-Support                                 |jarvim-snippets|
    Utility Scripts                                 |jarvim-utility|
Aesthetics                                          |jarvim-aesthetics|
    Statusline                                      |jarvim-statusline|
    Colorscheme                                     |jarvim-colorscheme|
FAQs                                                |jarvim-faq|
Support                                             |jarvim-support|
Acknowledgements                                    |jarvim-acknowledgements|

===============================================================================
INTRODUCTION                                *jarvim-introduction* *jarvim-intro*

Jarvim helps you get started with a minimal IDE-like configuration right
out-of-the-box without requiring YOU to configure anything initially.

The configurations are powered by useful plugins wherever necessary. While
some other features are configured through default options where possible.
Jarvim is unopinionated, programming language agnostic & doesn't assume about
any user-specific requirements. It's mainly focused on providing core IDE-like
experience on Neovim. What this means is you're free to extend your Vim (or
rather Neovim?) experience as cutomized as you need it to be.

DO NOTE: Jarvim isn't "fork of Vim (or Neovim at that) but rather it's a set
of configurations specifically for Neovim, so it won't work with Vim.

That said, Jarvim is a community maintained project, so if you feel there's
something missing out, feel free to open a PR at
https://github.com/Jarmos-san/Jarvim.

The goals of the project are:

1. To provide the user with a minimal IDE-like experience within Vim which
should work right out-of-the-box.

2. Keep the doors of further customizability open for the user(s) which means
you should be able to either remove/extend current features of Jarvim with
absolute ease.

3. Provide extensive documentation for those interested in customizing their
experience even further.

4. Provide community standard practices to make it easier to get started with.

For more detailed info check out the official wiki available at:
https://github.com/Jarmos-san/jarvim/wiki

 The wikia is community-maintained as well so if you feel there's missing info
 somewhere, feel free to make the necessary changes to it. <3 :)

===============================================================================
REQUIREMENTS                                *jarvim-requirements* *jarvim-deps*

As noted in the previous section, Jarvim is a Neovim only project, so it won't
work with Vim. Besides that, there're a couple of more requirements you'll
need to install and/or make Jarvim (as in the set of configurations)
flawlessly.

This sections lists all those pre-requisites for Jarvim to work:

1. Git (the Version Control System) to download plugins & update them.
2. Neovim v0.5+ for some of the features like native LSP to work.
3. A C/C++ compiler like `gcc` for the `nvim-treesitter` plugin.

NOTE: While Neovim is built with cross-platform support in mind, not all of
it's plugin were developed with that in mind though. It's a sad reality but
there's nothing we can do about it. Which is why it's STRONGLY RECOMMENDED
that you use Jarvim (or Neovim) in a Linux environment.

Good news from all Windows users out there, you can rely on a WSL environment
without facing any issues. Making some of the plugins work flawlessly on
Windows natively is a very painful experience. So, you best bet to make things
just work is Linux. So, if possible please use WSL, you can find info on how
to set it up at: https://docs.microsoft.com/en-us/windows/wsl/install

You can find detailed info on this issue in the wikia:

TODO: Write the issues with Neovim on Windows of the wikia before linking it
here in the docs.

===============================================================================
INSTALLATION                                                *jarvim-installation*

Before installing Jarvim, make sure you followed the notes detailed above. So,
ensure you've `git`, `gcc` (or any other compiler) & `nvim` installed &
available at `$PATH`.

So, if those steps are taken care off of, run the following commands based on
the platform you're using:

For Windows:
> 
    (iwr "https://git.io/JgTXE").content | iex 
<

For Linux/MacOS:

> 
    curl -Ss https://git.io/JgTXK | bash
<

For more info on installing Jarvim, take a look at the wiki:

TODO: Write the installation section of the wikia before linking it here.

===============================================================================
INSTALLED PLUGINS                                               *jarvim-plugins*

Jarvim provides many IDE-like features on Neovim thanks to some very useful
plugins. This section lists all the plugins used to configure Jarvim. Do note
though, the list of plugins are kept minimal with a reason. That way, you're
free to extend & configure them with ease. Also too many plugins could
potentially slow down Neovim's load times.

That said, following are the list of plugins used & their purpose:

- `wbthompson/packer.nvim` - A highly configurable & fast package manager
  built on top of Vim `packadd` features.
- `glepnir/galaxyline.nvim` - Provides a highly customizable & extensible
  statusline using pure Lua code.
- `b3nj5m1n/kommentary` - A Lua port of the popular `tpope/commentary.vim`
  plugin for toggling comments on/off with ease.
- `lukas-reineke/indent-blankline.nvim` - A plugin to visualize indents &
  whitespace lines clearly.
- `neovim/nvim-lspconfig` - TODO: Needs to be implemented
- `L3MON4D3/LuaSnip` - TODO: Needs to be implemented
- `nvim-telescope/telescope.nvim` - A versatile plugin for fuzzy finders, file
  management & much more!
- `nvim-treesitter/nvim-treesitter` for better syntax highlighting & other
  integration with plugins like visualizing indentlines
- `kyazdani42/nvim-web-devicons` for showcasing icons

===============================================================================
DIRECTORY STRUCTURE                                 *jarvim-directory-structure*

TODO: Explain Jarvim's directory structure

===============================================================================
CONFIGURATIONS                                              *jarvim-configurations*

*TODO: Write a brief about the available configurations

-------------------------------------------------------------------------------
KEY MAPPINGS                                                    *jarvim-keymaps*

*TODO: Explain each & every keymap available & justify their needs

--------------------------------------------------------------------------------
SETTINGS                                                        *jarvim-settings*

*TODO: Explain each vimoptions, what they do & how they're used in Jarvim

---------------------------------------------------------------------------------
AUTO-COMPLETE                                               *jarvim-autocomplete*

*TODO: Explain how Jarvim's autocomplete is configured

---------------------------------------------------------------------------------
LANGUAGE SERVER PROTOCOL                                            *jarvim-lsp*

*TODO: Brief about Neovim's native LSP & how it's configured

---------------------------------------------------------------------------------
SNIPPET SUPPORT                                                 *jarvim-snippets*

*TODO: Explain how Neovim's native LSP makes use of LuaSnip plugin

---------------------------------------------------------------------------------
UTILITY SCRIPTS                                                 *jarvim-utlities*

Neovim v0.5+ provides first-class support for a builtin Lua runtime which
means its possible to ditch VimScript in favor of Lua for all configuration
needs. Hence, a lot of people out there have built some pretty nifty utlity
wrappers to use with their Neovim environment. Jarvim has compiled some of the
best such utilitarian scripts for you.

So, you can simply import them & use them wherever necessary. Here's a list of
the current utlity wrappers & functions;

1. `create_autogroup()` is a wrapper for easily creating Autocommand groups!
This wrapper will either be removed/depecrated once Neovim has official
support for creating Autocommands. To track it's development, check out
https://github.com/neovim/neovim/pull/14661

2. `map()` is a wrapper for creating keymaps.

3. `is_buffer_empty()` is a wrapper to check if the current buffer is empty.

4. `has_width_gt()` is a wrapper to check if the window width is greater than
a given number of columns.

TODO: Write detailed explanation of what each utility scripts does.

Ofcourse these are only a few utlity wrappers to be used while configuring
Neovim, if you feel you might've a wrapper or two to share with the community
then feel free to open an Issue/Discussion thread. We'll then help you draft a
PR then.

=================================================================================
AESTHETICS                                                      *jarvim-aesthetics*

Not everyone has similar tastes which is why Jarvim doesn't include any
colorschemes other than the uber-popular `gruvbox` colorscheme. Besides
`gruvbox` the default colorschemes packaged with Neovim itself hasn't been
tinkered with. So, feel free to check them out if you're inclined to do so!

That said, do you want other popular colorschemes to be made available through
Jarvim? Then feel free open an Issue/Discussion thread & we can help you draft
a PR to add your fav colorscheme to the project.

Here's a short list of prospective colorschemes that could be added to Jarvim;

- Nord: https://github.com/arcticicestudio/nord-vim
- Solarized: https://github.com/altercation/vim-colors-solarized
- Material: https://github.com/kaicataldo/material.vim
- Monokai: https://github.com/sickill/vim-monokai

...and many more! The list is pretty much endless which is why we plan to
provide only the most popular colorschemes among the community.

To customize your Neovim experience even further and/or to make another
popular colorscheme available through Jarvim check out the wikia:

TODO: Add link to "Customize Jarvim" section of the wikia after it contains a
subsection about colorscheme

---------------------------------------------------------------------------------
STATUSLINE                                                      *jarvim-statusline*

*TODO: Brief about Jarvim's statusline & why the plugin `galaxyline.nvim` is
used

---------------------------------------------------------------------------------
COLORSCHEME                                                         *jarvim-colors*

Jarvim comes pre-packaged with the Gruvbox colorscheme because of it's
simplicity & minimalism. Besides, Gruvbox look nice pretty much on any
environment be it dark or light.

Don't like Gruvbox? Then feel free to change it to anything else you prefer.
And how would you do that?

First of, you could write your own colorscheme & to do that, be sure to read
the `h: colorscheme` & `h:syntax` documentations.

You could also use a default plugin which comes preinstalled with Neovim
itself. To check those colorschemes, checkout the following directories bases
on the operating system you're using.

On Windows (if installed using Scoop): >
    %USERPROFILE%\scoop\apps\neovim\current\share\nvim\colors
<
On Linux: >
    /usr/share/nvim/colors
<
It's also possible to package Jarvim along with other popular colorschems as
well like Nord, Monokai & such. So, feel free to open a PR/Issue thread
requesting such a change.

That said, once you figured out what colorscheme works for you, you got to
configure Neovim to use it. To do that, open your `init.lua` file & then look
for a like which looks like this: >
    cmd [[ colorscheme gruvbox ]]
<

Change that line of code to say: >
    cmd [[ colorscheme desert ]]
<

The source your `init.lua` file by pressing `<Space>s` & see the colorscheme
change! So, feel free to use whichever colorscheme you prefer other than the
ones made available through Jarvim!

Find it troublesome to figure out how to change colorschemes? Then do refer to
the `:h colorscheme` before opening an Issue/Discussion thread. You can find
additional community help over at:

- Issue Threads: https://github.com/Jarmos-san/jarvim/issues
- Discussion Threads: https://github.com/Jarmos-san/jarvim/discussions

==================================================================================
FAQS                                                                *jarvim-faqs*

This section lists some of the most frequently questions asked about Jarvim.
So, do you've some questions about Jarvim as well? Then before you ask them,
go through this section & figure out if it has already been answered or not.

1. Is Jarvim yet another fork of Vim (or rather Neovim)?
-> No, Jarvim isn't a fork of neither Vim nor Neovim. Rather, it's a set of
commonly used sensible configurations most of the Neovim community uses for
their development needs.

2. Is Jarvim a clone of VSCode on Neovim?
-> Not at all! Jarvim's sensible configurations tries to provide the user with
a set of configurations to download & start experience Vim right away. Since,
Neovim ships as a very minimal binary, Jarvim tries to bridge that gap between
a minimal text editor & an IDE like VSCode.

3. Does Jarvim have a LSP configuration builtin?
-> Yes, Jarvim makes the most out of the latest addition i.e native LSP
support. You no longer have to download yet another LSP plugin like `coc.nvim`
anymore. Check out `:h jarvim-lsp`, `:h jarvim-autocomplete` &
`h: jarvim-snippets` for more info on the same.

4. Is Jarvim customizable & extensible?
-> Yes, Jarvim was created with extensibility & further user-configurability
in mind. You're free to build upon what Jarvim already provides. Jarvim is
meant to work as a foundation for anyone to get started with Vim as quick as
possible for their IDE needs.

==================================================================================
SUPPORT                                                              *support-jarvim*

Jarvim is an open-source & community maintained project. Which means, the
maintainers of the project doesn't receive any renumerations from the project.
So, any helping hands you can provide to the project will ensure it'll
continue existing for years to come.

That said, here are a couple of ways you can consider supporting the project:

1. Contribute to the project by maintaining it, fixing bugs, responding to
issues & discussion threads. For more info on the same check out the official
repository at: https://github.com/Jarmos-san/Jarvim.

2. The other way to support this project is to simply spread the word. If
Jarvim helped you get started with the Vim experience easily, kindly do share
it others as well. Let more & more people experience Vim just like any other
IDEs.

3. And finally, consider dropping a tip if you found Jarvim useful. Be it any
amount, it helps more than you can imagine & keeps the maintainers motivated
to continue working on the project.

===================================================================================
ACKNOWLEDGEMENTS                                                *jarvim-inspirations*

Jarvim stands on the shoulders of giants. A lot of this project is the result
of inspirations from other people's Neovim configurations & other similar
projects. Following are some of the projects that Jarvim took inspirations
from:

1. https://github.com/disrupted/dotfiles
2. https://github.com/LunarVim/LunarVim
3. https://reddit.com/r/Neovim

vim:tw=78:ts=8:ft=help:norl:
